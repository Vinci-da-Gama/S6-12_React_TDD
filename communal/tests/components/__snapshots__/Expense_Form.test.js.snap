// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test form submit. should render error message for invaild form submission. 1`] = `
<div>
  <Alert
    closeAriaLabel="Close"
    color="danger"
    fade={true}
    isOpen={true}
    tag="div"
    transition={
      Object {
        "appear": true,
        "baseClass": "fade",
        "baseClassActive": "show",
        "enter": true,
        "exit": true,
        "in": true,
        "mountOnEnter": false,
        "onEnter": [Function],
        "onEntered": [Function],
        "onEntering": [Function],
        "onExit": [Function],
        "onExited": [Function],
        "onExiting": [Function],
        "tag": "div",
        "timeout": 150,
        "unmountOnExit": true,
      }
    }
  >
    Please provide description and amount.
  </Alert>
  <form
    name="expenseForm"
    noValidate={true}
    onSubmit={[Function]}
  >
    <Col
      className="mx-auto"
      md={4}
      sm={6}
      tag="div"
      widths={
        Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ]
      }
    >
      <Label
        className="bg-warning"
        tag="label"
        widths={
          Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ]
        }
      >
        Description:
      </Label>
      <input
        autoFocus={true}
        className="w-100 form-control rounded-0"
        name="ef_description"
        onChange={[Function]}
        placeholder="Description..."
        type="text"
        value=""
      />
    </Col>
    <Col
      className="mx-auto"
      md={4}
      sm={6}
      tag="div"
      widths={
        Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ]
      }
    >
      <Label
        className="bg-warning"
        tag="label"
        widths={
          Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ]
        }
      >
        Amount:
      </Label>
      <input
        className="w-100 form-control rounded-0"
        name="ef_Amount"
        onChange={[Function]}
        placeholder="Amount..."
        type="text"
        value=""
      />
    </Col>
    <Col
      className="mx-auto"
      md={4}
      sm={6}
      tag="div"
      widths={
        Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ]
      }
    >
      <Badge
        color="warning"
        pill={true}
        tag="span"
      >
        Create Date:
      </Badge>
      <br />
      <withStyles(SingleDatePicker)
        anchorDirection="left"
        appendToBody={false}
        block={false}
        calendarInfoPosition="bottom"
        customCloseIcon={null}
        customInputIcon={null}
        date={"1970-01-01T00:00:00.000Z"}
        daySize={39}
        disableScroll={false}
        disabled={false}
        displayFormat={[Function]}
        enableOutsideDays={false}
        firstDayOfWeek={null}
        focused={false}
        hideKeyboardShortcutsPanel={false}
        horizontalMargin={0}
        horizontalMonthPadding={13}
        id="sd-pIcker"
        initialVisibleMonth={null}
        inputIconPosition="before"
        isDayBlocked={[Function]}
        isDayHighlighted={[Function]}
        isOutsideRange={[Function]}
        isRTL={false}
        keepFocusOnInput={false}
        keepOpenOnDateSelect={false}
        monthFormat="MMMM YYYY"
        navNext={null}
        navPrev={null}
        noBorder={false}
        numberOfMonths={1}
        onClose={[Function]}
        onDateChange={[Function]}
        onFocusChange={[Function]}
        onNextMonthClick={[Function]}
        onPrevMonthClick={[Function]}
        openDirection="down"
        orientation="horizontal"
        phrases={
          Object {
            "calendarLabel": "Calendar",
            "chooseAvailableDate": [Function],
            "clearDate": "Clear Date",
            "closeDatePicker": "Close",
            "dateIsSelected": [Function],
            "dateIsUnavailable": [Function],
            "enterKey": "Enter key",
            "escape": "Escape key",
            "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
            "homeEnd": "Home and end keys",
            "jumpToNextMonth": "Move forward to switch to the next month.",
            "jumpToPrevMonth": "Move backward to switch to the previous month.",
            "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
            "keyboardShortcuts": "Keyboard Shortcuts",
            "leftArrowRightArrow": "Right and left arrow keys",
            "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
            "moveFocusByOneMonth": "Switch months.",
            "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
            "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
            "openThisPanel": "Open this panel.",
            "pageUpPageDown": "page up and page down keys",
            "questionMark": "Question mark",
            "returnFocusToInput": "Return to the date input field.",
            "selectFocusedDate": "Select the date in focus.",
            "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
            "upArrowDownArrow": "up and down arrow keys",
          }
        }
        placeholder="Date"
        readOnly={false}
        regular={false}
        renderCalendarInfo={null}
        renderDayContents={null}
        renderMonthElement={null}
        renderMonthText={null}
        reopenPickerOnClearDate={false}
        required={false}
        screenReaderInputMessage=""
        showClearDate={false}
        showDefaultInputIcon={false}
        small={false}
        verticalHeight={null}
        verticalSpacing={22}
        weekDayFormat="dd"
        withFullScreenPortal={false}
        withPortal={false}
      />
    </Col>
    <Col
      className="mx-auto"
      md={4}
      sm={6}
      tag="div"
      widths={
        Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ]
      }
    >
      <Label
        className="bg-warning"
        tag="label"
        widths={
          Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ]
        }
      >
        Note:
      </Label>
      <br />
      <textarea
        className="w-100"
        name="ef_note"
        onChange={[Function]}
        placeholder="Add a note for your expense (optional)"
        rows="5"
        value=""
      />
    </Col>
    <Col
      className="mx-auto"
      md={4}
      sm={6}
      tag="div"
      widths={
        Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ]
      }
    >
      <Button
        block={true}
        color="success"
        outline={true}
        tag="button"
      >
        Add_Expense
      </Button>
    </Col>
  </form>
</div>
`;

exports[`should render expense form correctly with one expense data 1`] = `
<div>
  <form
    name="expenseForm"
    noValidate={true}
    onSubmit={[Function]}
  >
    <Col
      className="mx-auto"
      md={4}
      sm={6}
      tag="div"
      widths={
        Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ]
      }
    >
      <Label
        className="bg-warning"
        tag="label"
        widths={
          Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ]
        }
      >
        Description:
      </Label>
      <input
        autoFocus={true}
        className="w-100 form-control rounded-0"
        name="ef_description"
        onChange={[Function]}
        placeholder="Description..."
        type="text"
        value="Rent"
      />
    </Col>
    <Col
      className="mx-auto"
      md={4}
      sm={6}
      tag="div"
      widths={
        Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ]
      }
    >
      <Label
        className="bg-warning"
        tag="label"
        widths={
          Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ]
        }
      >
        Amount:
      </Label>
      <input
        className="w-100 form-control rounded-0"
        name="ef_Amount"
        onChange={[Function]}
        placeholder="Amount..."
        type="text"
        value="1095"
      />
    </Col>
    <Col
      className="mx-auto"
      md={4}
      sm={6}
      tag="div"
      widths={
        Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ]
      }
    >
      <Badge
        color="warning"
        pill={true}
        tag="span"
      >
        Create Date:
      </Badge>
      <br />
      <withStyles(SingleDatePicker)
        anchorDirection="left"
        appendToBody={false}
        block={false}
        calendarInfoPosition="bottom"
        customCloseIcon={null}
        customInputIcon={null}
        date={"1969-12-27T23:00:00.000Z"}
        daySize={39}
        disableScroll={false}
        disabled={false}
        displayFormat={[Function]}
        enableOutsideDays={false}
        firstDayOfWeek={null}
        focused={false}
        hideKeyboardShortcutsPanel={false}
        horizontalMargin={0}
        horizontalMonthPadding={13}
        id="sd-pIcker"
        initialVisibleMonth={null}
        inputIconPosition="before"
        isDayBlocked={[Function]}
        isDayHighlighted={[Function]}
        isOutsideRange={[Function]}
        isRTL={false}
        keepFocusOnInput={false}
        keepOpenOnDateSelect={false}
        monthFormat="MMMM YYYY"
        navNext={null}
        navPrev={null}
        noBorder={false}
        numberOfMonths={1}
        onClose={[Function]}
        onDateChange={[Function]}
        onFocusChange={[Function]}
        onNextMonthClick={[Function]}
        onPrevMonthClick={[Function]}
        openDirection="down"
        orientation="horizontal"
        phrases={
          Object {
            "calendarLabel": "Calendar",
            "chooseAvailableDate": [Function],
            "clearDate": "Clear Date",
            "closeDatePicker": "Close",
            "dateIsSelected": [Function],
            "dateIsUnavailable": [Function],
            "enterKey": "Enter key",
            "escape": "Escape key",
            "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
            "homeEnd": "Home and end keys",
            "jumpToNextMonth": "Move forward to switch to the next month.",
            "jumpToPrevMonth": "Move backward to switch to the previous month.",
            "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
            "keyboardShortcuts": "Keyboard Shortcuts",
            "leftArrowRightArrow": "Right and left arrow keys",
            "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
            "moveFocusByOneMonth": "Switch months.",
            "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
            "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
            "openThisPanel": "Open this panel.",
            "pageUpPageDown": "page up and page down keys",
            "questionMark": "Question mark",
            "returnFocusToInput": "Return to the date input field.",
            "selectFocusedDate": "Select the date in focus.",
            "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
            "upArrowDownArrow": "up and down arrow keys",
          }
        }
        placeholder="Date"
        readOnly={false}
        regular={false}
        renderCalendarInfo={null}
        renderDayContents={null}
        renderMonthElement={null}
        renderMonthText={null}
        reopenPickerOnClearDate={false}
        required={false}
        screenReaderInputMessage=""
        showClearDate={false}
        showDefaultInputIcon={false}
        small={false}
        verticalHeight={null}
        verticalSpacing={22}
        weekDayFormat="dd"
        withFullScreenPortal={false}
        withPortal={false}
      />
    </Col>
    <Col
      className="mx-auto"
      md={4}
      sm={6}
      tag="div"
      widths={
        Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ]
      }
    >
      <Label
        className="bg-warning"
        tag="label"
        widths={
          Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ]
        }
      >
        Note:
      </Label>
      <br />
      <textarea
        className="w-100"
        name="ef_note"
        onChange={[Function]}
        placeholder="Add a note for your expense (optional)"
        rows="5"
        value="This is rent"
      />
    </Col>
    <Col
      className="mx-auto"
      md={4}
      sm={6}
      tag="div"
      widths={
        Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ]
      }
    >
      <Button
        block={true}
        color="success"
        outline={true}
        tag="button"
      >
        Add_Expense
      </Button>
    </Col>
  </form>
</div>
`;

exports[`should render expense form correctly. 1`] = `
<div>
  <form
    name="expenseForm"
    noValidate={true}
    onSubmit={[Function]}
  >
    <Col
      className="mx-auto"
      md={4}
      sm={6}
      tag="div"
      widths={
        Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ]
      }
    >
      <Label
        className="bg-warning"
        tag="label"
        widths={
          Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ]
        }
      >
        Description:
      </Label>
      <input
        autoFocus={true}
        className="w-100 form-control rounded-0"
        name="ef_description"
        onChange={[Function]}
        placeholder="Description..."
        type="text"
        value=""
      />
    </Col>
    <Col
      className="mx-auto"
      md={4}
      sm={6}
      tag="div"
      widths={
        Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ]
      }
    >
      <Label
        className="bg-warning"
        tag="label"
        widths={
          Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ]
        }
      >
        Amount:
      </Label>
      <input
        className="w-100 form-control rounded-0"
        name="ef_Amount"
        onChange={[Function]}
        placeholder="Amount..."
        type="text"
        value=""
      />
    </Col>
    <Col
      className="mx-auto"
      md={4}
      sm={6}
      tag="div"
      widths={
        Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ]
      }
    >
      <Badge
        color="warning"
        pill={true}
        tag="span"
      >
        Create Date:
      </Badge>
      <br />
      <withStyles(SingleDatePicker)
        anchorDirection="left"
        appendToBody={false}
        block={false}
        calendarInfoPosition="bottom"
        customCloseIcon={null}
        customInputIcon={null}
        date={"1970-01-01T00:00:00.000Z"}
        daySize={39}
        disableScroll={false}
        disabled={false}
        displayFormat={[Function]}
        enableOutsideDays={false}
        firstDayOfWeek={null}
        focused={false}
        hideKeyboardShortcutsPanel={false}
        horizontalMargin={0}
        horizontalMonthPadding={13}
        id="sd-pIcker"
        initialVisibleMonth={null}
        inputIconPosition="before"
        isDayBlocked={[Function]}
        isDayHighlighted={[Function]}
        isOutsideRange={[Function]}
        isRTL={false}
        keepFocusOnInput={false}
        keepOpenOnDateSelect={false}
        monthFormat="MMMM YYYY"
        navNext={null}
        navPrev={null}
        noBorder={false}
        numberOfMonths={1}
        onClose={[Function]}
        onDateChange={[Function]}
        onFocusChange={[Function]}
        onNextMonthClick={[Function]}
        onPrevMonthClick={[Function]}
        openDirection="down"
        orientation="horizontal"
        phrases={
          Object {
            "calendarLabel": "Calendar",
            "chooseAvailableDate": [Function],
            "clearDate": "Clear Date",
            "closeDatePicker": "Close",
            "dateIsSelected": [Function],
            "dateIsUnavailable": [Function],
            "enterKey": "Enter key",
            "escape": "Escape key",
            "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
            "homeEnd": "Home and end keys",
            "jumpToNextMonth": "Move forward to switch to the next month.",
            "jumpToPrevMonth": "Move backward to switch to the previous month.",
            "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
            "keyboardShortcuts": "Keyboard Shortcuts",
            "leftArrowRightArrow": "Right and left arrow keys",
            "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
            "moveFocusByOneMonth": "Switch months.",
            "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
            "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
            "openThisPanel": "Open this panel.",
            "pageUpPageDown": "page up and page down keys",
            "questionMark": "Question mark",
            "returnFocusToInput": "Return to the date input field.",
            "selectFocusedDate": "Select the date in focus.",
            "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
            "upArrowDownArrow": "up and down arrow keys",
          }
        }
        placeholder="Date"
        readOnly={false}
        regular={false}
        renderCalendarInfo={null}
        renderDayContents={null}
        renderMonthElement={null}
        renderMonthText={null}
        reopenPickerOnClearDate={false}
        required={false}
        screenReaderInputMessage=""
        showClearDate={false}
        showDefaultInputIcon={false}
        small={false}
        verticalHeight={null}
        verticalSpacing={22}
        weekDayFormat="dd"
        withFullScreenPortal={false}
        withPortal={false}
      />
    </Col>
    <Col
      className="mx-auto"
      md={4}
      sm={6}
      tag="div"
      widths={
        Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ]
      }
    >
      <Label
        className="bg-warning"
        tag="label"
        widths={
          Array [
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
          ]
        }
      >
        Note:
      </Label>
      <br />
      <textarea
        className="w-100"
        name="ef_note"
        onChange={[Function]}
        placeholder="Add a note for your expense (optional)"
        rows="5"
        value=""
      />
    </Col>
    <Col
      className="mx-auto"
      md={4}
      sm={6}
      tag="div"
      widths={
        Array [
          "xs",
          "sm",
          "md",
          "lg",
          "xl",
        ]
      }
    >
      <Button
        block={true}
        color="success"
        outline={true}
        tag="button"
      >
        Add_Expense
      </Button>
    </Col>
  </form>
</div>
`;
